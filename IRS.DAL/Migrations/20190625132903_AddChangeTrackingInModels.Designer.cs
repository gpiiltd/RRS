// <auto-generated />
using System;
using IRS.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IRS.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190625132903_AddChangeTrackingInModels")]
    partial class AddChangeTrackingInModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IRS.DAL.Models.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CityId");

                    b.Property<string>("Code");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("Protected");

                    b.Property<Guid?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("IRS.DAL.Models.AuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientIP");

                    b.Property<string>("ClientUserAgent");

                    b.Property<string>("Controller");

                    b.Property<DateTime>("DateHappened");

                    b.Property<string>("Description");

                    b.Property<string>("EventAction");

                    b.Property<string>("RecordData");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("IRS.DAL.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("Protected");

                    b.Property<Guid?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("IRS.DAL.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code1");

                    b.Property<string>("Code2");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("Protected");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("IRS.DAL.Models.Identity.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("IRS.DAL.Models.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<Guid?>("AreaOfOriginId");

                    b.Property<Guid?>("CityOfOriginId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<Guid?>("CountryOfOriginId");

                    b.Property<Guid>("CreatedByUserId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateEdited");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<bool>("Deleted");

                    b.Property<Guid?>("DepartmentId");

                    b.Property<Guid?>("EditedByUserId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("Email1");

                    b.Property<string>("Email2");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("Introduction");

                    b.Property<string>("JobTitle");

                    b.Property<string>("KnownAs");

                    b.Property<DateTime>("LastActive");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoUrl");

                    b.Property<int>("PreferredContactMethod");

                    b.Property<bool>("Protected");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StaffNo");

                    b.Property<Guid?>("StateOfOriginId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AreaOfOriginId");

                    b.HasIndex("CityOfOriginId");

                    b.HasIndex("CountryOfOriginId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateOfOriginId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IRS.DAL.Models.Identity.UserRoles", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("IRS.DAL.Models.Incidence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AreaId");

                    b.Property<Guid?>("AssigneeId");

                    b.Property<Guid?>("AssignerId");

                    b.Property<Guid?>("CityId");

                    b.Property<string>("Code")
                        .HasMaxLength(200);

                    b.Property<string>("Comment")
                        .HasMaxLength(1024);

                    b.Property<Guid?>("CountryId");

                    b.Property<Guid>("CreatedByUserId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateEdited");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<Guid?>("EditedByUserId");

                    b.Property<Guid>("IncidenceStatusId");

                    b.Property<Guid>("IncidenceTypeId");

                    b.Property<Guid?>("OrganizationId");

                    b.Property<bool>("Protected");

                    b.Property<double>("ReportedIncidenceLatitude");

                    b.Property<double>("ReportedIncidenceLongitude");

                    b.Property<string>("ReporterEmail")
                        .HasMaxLength(50);

                    b.Property<string>("ReporterFeedbackComment")
                        .HasMaxLength(1024);

                    b.Property<int?>("ReporterFeedbackRating");

                    b.Property<string>("ReporterName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ResolutionDate");

                    b.Property<string>("RouteCause")
                        .HasMaxLength(255);

                    b.Property<Guid?>("StateId");

                    b.Property<string>("Suggestion")
                        .HasMaxLength(255);

                    b.Property<Guid?>("SystemSettingId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("AssignerId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EditedByUserId");

                    b.HasIndex("IncidenceStatusId");

                    b.HasIndex("IncidenceTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StateId");

                    b.HasIndex("SystemSettingId");

                    b.ToTable("Incidences");
                });

            modelBuilder.Entity("IRS.DAL.Models.IncidenceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("Protected");

                    b.HasKey("Id");

                    b.ToTable("IncidenceStatuses");
                });

            modelBuilder.Entity("IRS.DAL.Models.IncidenceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("Protected");

                    b.HasKey("Id");

                    b.ToTable("IncidenceTypes");
                });

            modelBuilder.Entity("IRS.DAL.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcceptedFileTypes");

                    b.Property<Guid?>("AreaId");

                    b.Property<string>("BrandCssStyle");

                    b.Property<string>("BrandIcon");

                    b.Property<string>("BrandLogo");

                    b.Property<string>("BrandTitle");

                    b.Property<string>("BusinessCategory");

                    b.Property<Guid?>("CityId");

                    b.Property<string>("Code");

                    b.Property<string>("Comment");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactFirstName");

                    b.Property<string>("ContactLastName");

                    b.Property<string>("ContactMiddleName");

                    b.Property<Guid?>("CountryId");

                    b.Property<Guid>("CreatedByUserId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateEdited");

                    b.Property<DateTime>("DateofEst");

                    b.Property<bool>("Deleted");

                    b.Property<Guid?>("EditedByUserId");

                    b.Property<string>("Email1");

                    b.Property<string>("Email2");

                    b.Property<bool>("EnableBranding");

                    b.Property<string>("HostName");

                    b.Property<string>("MaxFileSize");

                    b.Property<string>("OfficeAddress");

                    b.Property<int>("PageSize");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("Port");

                    b.Property<string>("PreferredLanguage");

                    b.Property<bool>("Protected");

                    b.Property<string>("RegistrationNo");

                    b.Property<Guid?>("StateId");

                    b.Property<bool>("UseSsl");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EditedByUserId");

                    b.HasIndex("StateId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("IRS.DAL.Models.OrganizationDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<Guid?>("OrganizationId");

                    b.Property<bool>("Protected");

                    b.Property<Guid?>("SystemSettingId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SystemSettingId");

                    b.ToTable("OrganizationDepartments");
                });

            modelBuilder.Entity("IRS.DAL.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<Guid?>("IncidenceId");

                    b.Property<string>("Url")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("IncidenceId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("IRS.DAL.Models.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid?>("CountryId");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("Protected");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("IRS.DAL.Models.SystemSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcceptedFileTypes");

                    b.Property<string>("BrandCssStyle");

                    b.Property<string>("BrandIcon");

                    b.Property<string>("BrandLogo");

                    b.Property<string>("BrandTitle");

                    b.Property<string>("Email1");

                    b.Property<string>("Email2");

                    b.Property<string>("HostName");

                    b.Property<string>("MaxFileSize");

                    b.Property<int>("PageSize");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("Port");

                    b.Property<string>("PreferredLanguage");

                    b.Property<bool>("UseSsl");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("IRS.DAL.Models.UserDeployment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AreaOfDeploymentId");

                    b.Property<Guid?>("CityOfDeploymentId");

                    b.Property<Guid?>("CountryOfDeploymentId");

                    b.Property<Guid>("CreatedByUserId");

                    b.Property<bool>("CurrentDeployment");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateEdited");

                    b.Property<DateTime>("DateOfDeployment");

                    b.Property<DateTime>("DateOfSignOff");

                    b.Property<bool>("Deleted");

                    b.Property<Guid?>("DepartmentId");

                    b.Property<Guid?>("EditedByUserId");

                    b.Property<bool>("Protected");

                    b.Property<Guid?>("StateOfDeploymentId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AreaOfDeploymentId");

                    b.HasIndex("CityOfDeploymentId");

                    b.HasIndex("CountryOfDeploymentId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EditedByUserId");

                    b.HasIndex("StateOfDeploymentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDeployment");
                });

            modelBuilder.Entity("IRS.DAL.Models.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<Guid?>("IncidenceId");

                    b.Property<string>("Url")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("IncidenceId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IRS.DAL.Models.Area", b =>
                {
                    b.HasOne("IRS.DAL.Models.City", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId");

                    b.HasOne("IRS.DAL.Models.State", "State")
                        .WithMany("Areas")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("IRS.DAL.Models.AuditTrail", b =>
                {
                    b.HasOne("IRS.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IRS.DAL.Models.City", b =>
                {
                    b.HasOne("IRS.DAL.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("IRS.DAL.Models.Identity.User", b =>
                {
                    b.HasOne("IRS.DAL.Models.Area", "AreaOfOrigin")
                        .WithMany()
                        .HasForeignKey("AreaOfOriginId");

                    b.HasOne("IRS.DAL.Models.City", "CityOfOrigin")
                        .WithMany()
                        .HasForeignKey("CityOfOriginId");

                    b.HasOne("IRS.DAL.Models.Country", "CountryOfOrigin")
                        .WithMany()
                        .HasForeignKey("CountryOfOriginId");

                    b.HasOne("IRS.DAL.Models.OrganizationDepartment", "UserDepartment")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("IRS.DAL.Models.State", "StateOfOrigin")
                        .WithMany()
                        .HasForeignKey("StateOfOriginId");
                });

            modelBuilder.Entity("IRS.DAL.Models.Identity.UserRoles", b =>
                {
                    b.HasOne("IRS.DAL.Models.Identity.Roles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IRS.DAL.Models.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IRS.DAL.Models.Incidence", b =>
                {
                    b.HasOne("IRS.DAL.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("IRS.DAL.Models.Identity.User", "Assignee")
                        .WithMany("AssignedIncidences")
                        .HasForeignKey("AssigneeId");

                    b.HasOne("IRS.DAL.Models.Identity.User", "Assigner")
                        .WithMany("AllocatedIncidences")
                        .HasForeignKey("AssignerId");

                    b.HasOne("IRS.DAL.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("IRS.DAL.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("IRS.DAL.Models.Identity.User", "CreatedByUser")
                        .WithMany("CreatedIncidences")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IRS.DAL.Models.Identity.User", "EditedByUser")
                        .WithMany("EditedIncidences")
                        .HasForeignKey("EditedByUserId");

                    b.HasOne("IRS.DAL.Models.IncidenceStatus", "IncidenceStatuses")
                        .WithMany("Incidences")
                        .HasForeignKey("IncidenceStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IRS.DAL.Models.IncidenceType", "IncidenceTypes")
                        .WithMany("Incidences")
                        .HasForeignKey("IncidenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IRS.DAL.Models.Organization", "AssignedOrganization")
                        .WithMany("AllocatedIncidences")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("IRS.DAL.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("IRS.DAL.Models.SystemSetting")
                        .WithMany("AllocatedIncidences")
                        .HasForeignKey("SystemSettingId");
                });

            modelBuilder.Entity("IRS.DAL.Models.Organization", b =>
                {
                    b.HasOne("IRS.DAL.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("IRS.DAL.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("IRS.DAL.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("IRS.DAL.Models.Identity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IRS.DAL.Models.Identity.User", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId");

                    b.HasOne("IRS.DAL.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("IRS.DAL.Models.OrganizationDepartment", b =>
                {
                    b.HasOne("IRS.DAL.Models.Organization", "Organization")
                        .WithMany("OrganizationDepartments")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("IRS.DAL.Models.SystemSetting")
                        .WithMany("OrganizationDepartments")
                        .HasForeignKey("SystemSettingId");
                });

            modelBuilder.Entity("IRS.DAL.Models.Photo", b =>
                {
                    b.HasOne("IRS.DAL.Models.Incidence", "Incidence")
                        .WithMany("Photos")
                        .HasForeignKey("IncidenceId");
                });

            modelBuilder.Entity("IRS.DAL.Models.State", b =>
                {
                    b.HasOne("IRS.DAL.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("IRS.DAL.Models.UserDeployment", b =>
                {
                    b.HasOne("IRS.DAL.Models.Area", "AreaOfDeployment")
                        .WithMany()
                        .HasForeignKey("AreaOfDeploymentId");

                    b.HasOne("IRS.DAL.Models.City", "CityOfDeployment")
                        .WithMany()
                        .HasForeignKey("CityOfDeploymentId");

                    b.HasOne("IRS.DAL.Models.Country", "CountryOfDeployment")
                        .WithMany()
                        .HasForeignKey("CountryOfDeploymentId");

                    b.HasOne("IRS.DAL.Models.Identity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IRS.DAL.Models.OrganizationDepartment", "UserDepartment")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("IRS.DAL.Models.Identity.User", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId");

                    b.HasOne("IRS.DAL.Models.State", "StateOfDeployment")
                        .WithMany()
                        .HasForeignKey("StateOfDeploymentId");

                    b.HasOne("IRS.DAL.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IRS.DAL.Models.Video", b =>
                {
                    b.HasOne("IRS.DAL.Models.Incidence", "Incidence")
                        .WithMany("Videos")
                        .HasForeignKey("IncidenceId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("IRS.DAL.Models.Identity.Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("IRS.DAL.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("IRS.DAL.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("IRS.DAL.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
