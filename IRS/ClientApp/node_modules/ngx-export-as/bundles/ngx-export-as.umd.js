(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('html2canvas'), require('xlsx'), require('html-docx-js/dist/html-docx'), require('html2pdf.js')) :
    typeof define === 'function' && define.amd ? define('ngx-export-as', ['exports', '@angular/core', 'rxjs', 'html2canvas', 'xlsx', 'html-docx-js/dist/html-docx', 'html2pdf.js'], factory) :
    (factory((global['ngx-export-as'] = {}),global.ng.core,global.rxjs,global.html2canvas,global.XLSX,global.htmlDocx,global.html2pdf));
}(this, (function (exports,core,rxjs,html2canvas,XLSX,htmlDocx,html2pdf) { 'use strict';

    html2canvas = html2canvas && html2canvas.hasOwnProperty('default') ? html2canvas['default'] : html2canvas;
    html2pdf = html2pdf && html2pdf.hasOwnProperty('default') ? html2pdf['default'] : html2pdf;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    window['html2canvas'] = html2canvas;
    var ExportAsService = /** @class */ (function () {
        function ExportAsService() {
        }
        /**
         * Main base64 get method, it will return the file as base64 string
         * @param config your config
         */
        /**
         * Main base64 get method, it will return the file as base64 string
         * @param {?} config your config
         * @return {?}
         */
        ExportAsService.prototype.get = /**
         * Main base64 get method, it will return the file as base64 string
         * @param {?} config your config
         * @return {?}
         */
            function (config) {
                // structure method name dynamically by type
                /** @type {?} */
                var func = 'get' + config.type.toUpperCase();
                // if type supported execute and return
                if (this[func]) {
                    return this[func](config);
                }
                // throw error for unsupported formats
                return rxjs.Observable.create(function (observer) { observer.error('Export type is not supported.'); });
            };
        /**
         * Save exported file in old javascript way
         * @param config your custom config
         * @param fileName Name of the file to be saved as
         */
        /**
         * Save exported file in old javascript way
         * @param {?} config your custom config
         * @param {?} fileName Name of the file to be saved as
         * @return {?}
         */
        ExportAsService.prototype.save = /**
         * Save exported file in old javascript way
         * @param {?} config your custom config
         * @param {?} fileName Name of the file to be saved as
         * @return {?}
         */
            function (config, fileName) {
                // set download
                config.download = true;
                // get file name with type
                config.fileName = fileName + '.' + config.type;
                this.get(config).subscribe();
            };
        /**
         * Converts content string to blob object
         * @param content string to be converted
         */
        /**
         * Converts content string to blob object
         * @param {?} content string to be converted
         * @return {?}
         */
        ExportAsService.prototype.contentToBlob = /**
         * Converts content string to blob object
         * @param {?} content string to be converted
         * @return {?}
         */
            function (content) {
                return rxjs.Observable.create(function (observer) {
                    // get content string and extract mime type
                    /** @type {?} */
                    var arr = content.split(',');
                    /** @type {?} */
                    var mime = arr[0].match(/:(.*?);/)[1];
                    /** @type {?} */
                    var bstr = atob(arr[1]);
                    /** @type {?} */
                    var n = bstr.length;
                    /** @type {?} */
                    var u8arr = new Uint8Array(n);
                    while (n--) {
                        u8arr[n] = bstr.charCodeAt(n);
                    }
                    observer.next(new Blob([u8arr], { type: mime }));
                    observer.complete();
                });
            };
        /**
         * Removes base64 file type from a string like "data:text/csv;base64,"
         * @param fileContent the base64 string to remove the type from
         */
        /**
         * Removes base64 file type from a string like "data:text/csv;base64,"
         * @param {?} fileContent the base64 string to remove the type from
         * @return {?}
         */
        ExportAsService.prototype.removeFileTypeFromBase64 = /**
         * Removes base64 file type from a string like "data:text/csv;base64,"
         * @param {?} fileContent the base64 string to remove the type from
         * @return {?}
         */
            function (fileContent) {
                /** @type {?} */
                var re = /^data:[^]*;base64,/g;
                /** @type {?} */
                var newContent = re[Symbol.replace](fileContent, '');
                return newContent;
            };
        /**
         * Structure the base64 file content with the file type string
         * @param fileContent file content
         * @param fileMime file mime type "text/csv"
         */
        /**
         * Structure the base64 file content with the file type string
         * @param {?} fileContent file content
         * @param {?} fileMime file mime type "text/csv"
         * @return {?}
         */
        ExportAsService.prototype.addFileTypeToBase64 = /**
         * Structure the base64 file content with the file type string
         * @param {?} fileContent file content
         * @param {?} fileMime file mime type "text/csv"
         * @return {?}
         */
            function (fileContent, fileMime) {
                return "data:" + fileMime + ";base64," + fileContent;
            };
        /**
         * create downloadable file from dataURL
         * @param fileName downloadable file name
         * @param dataURL file content as dataURL
         */
        /**
         * create downloadable file from dataURL
         * @param {?} fileName downloadable file name
         * @param {?} dataURL file content as dataURL
         * @return {?}
         */
        ExportAsService.prototype.downloadFromDataURL = /**
         * create downloadable file from dataURL
         * @param {?} fileName downloadable file name
         * @param {?} dataURL file content as dataURL
         * @return {?}
         */
            function (fileName, dataURL) {
                var _this = this;
                // create blob
                this.contentToBlob(dataURL).subscribe(function (blob) {
                    // download the blob
                    _this.downloadFromBlob(blob, fileName);
                });
            };
        /**
         * Downloads the blob object as a file
         * @param blob file object as blob
         * @param fileName downloadable file name
         */
        /**
         * Downloads the blob object as a file
         * @param {?} blob file object as blob
         * @param {?} fileName downloadable file name
         * @return {?}
         */
        ExportAsService.prototype.downloadFromBlob = /**
         * Downloads the blob object as a file
         * @param {?} blob file object as blob
         * @param {?} fileName downloadable file name
         * @return {?}
         */
            function (blob, fileName) {
                // get object url
                /** @type {?} */
                var url = window.URL.createObjectURL(blob);
                // check for microsoft internet explorer
                if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                    // use IE download or open if the user using IE
                    window.navigator.msSaveOrOpenBlob(blob, fileName);
                }
                else {
                    // if not using IE then create link element
                    /** @type {?} */
                    var element = document.createElement('a');
                    // set download attr with file name
                    element.setAttribute('download', fileName);
                    // set the element as hidden
                    element.style.display = 'none';
                    // append the body
                    document.body.appendChild(element);
                    // set href attr
                    element.href = url;
                    // click on it to start downloading
                    element.click();
                    // remove the link from the dom
                    document.body.removeChild(element);
                }
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getPDF = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return rxjs.Observable.create(function (observer) {
                    if (!config.options) {
                        config.options = {};
                    }
                    config.options.filename = config.fileName;
                    /** @type {?} */
                    var element = document.getElementById(config.elementId);
                    /** @type {?} */
                    var pdf = html2pdf().set(config.options).from(element, 'element');
                    if (config.download) {
                        pdf.save();
                        observer.next();
                        observer.complete();
                    }
                    else {
                        pdf.outputPdf('datauristring').then(function (data) {
                            observer.next(data);
                            observer.complete();
                        });
                    }
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getPNG = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var element = document.getElementById(config.elementId);
                    html2canvas(element, config.options).then(function (canvas) {
                        /** @type {?} */
                        var imgData = canvas.toDataURL('image/PNG');
                        if (config.type === 'png' && config.download) {
                            _this.downloadFromDataURL(config.fileName, imgData);
                            observer.next();
                        }
                        else {
                            observer.next(imgData);
                        }
                        observer.complete();
                    }, function (err) {
                        observer.error(err);
                    });
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getCSV = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var element = document.getElementById(config.elementId);
                    /** @type {?} */
                    var csv = [];
                    /** @type {?} */
                    var rows = element.querySelectorAll('table tr');
                    for (var index = 0; index < rows.length; index++) {
                        /** @type {?} */
                        var rowElement = rows[index];
                        /** @type {?} */
                        var row = [];
                        /** @type {?} */
                        var cols = rowElement.querySelectorAll('td, th');
                        for (var colIndex = 0; colIndex < cols.length; colIndex++) {
                            /** @type {?} */
                            var col = cols[colIndex];
                            row.push(col.innerText);
                        }
                        csv.push(row.join(','));
                    }
                    /** @type {?} */
                    var csvContent = 'data:text/csv;base64,' + _this.btoa(csv.join('\n'));
                    if (config.download) {
                        _this.downloadFromDataURL(config.fileName, csvContent);
                        observer.next();
                    }
                    else {
                        observer.next(csvContent);
                    }
                    observer.complete();
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getTXT = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                /** @type {?} */
                var nameFrags = config.fileName.split('.');
                config.fileName = nameFrags[0] + ".txt";
                return this.getCSV(config);
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getXLS = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var element = document.getElementById(config.elementId);
                    /** @type {?} */
                    var ws3 = XLSX.utils.table_to_sheet(element, config.options);
                    /** @type {?} */
                    var wb = XLSX.utils.book_new();
                    XLSX.utils.book_append_sheet(wb, ws3, config.fileName);
                    /** @type {?} */
                    var out = XLSX.write(wb, { type: 'base64' });
                    /** @type {?} */
                    var xlsContent = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + out;
                    if (config.download) {
                        _this.downloadFromDataURL(config.fileName, xlsContent);
                        observer.next();
                    }
                    else {
                        observer.next(xlsContent);
                    }
                    observer.complete();
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getXLSX = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return this.getXLS(config);
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getDOCX = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var contentDocument = document.getElementById(config.elementId).outerHTML;
                    /** @type {?} */
                    var content = '<!DOCTYPE html>' + contentDocument;
                    /** @type {?} */
                    var converted = htmlDocx.asBlob(content, config.options);
                    if (config.download) {
                        _this.downloadFromBlob(converted, config.fileName);
                        observer.next();
                        observer.complete();
                    }
                    else {
                        /** @type {?} */
                        var reader_1 = new FileReader();
                        reader_1.onloadend = function () {
                            /** @type {?} */
                            var base64data = reader_1.result;
                            observer.next(base64data);
                            observer.complete();
                        };
                        reader_1.readAsDataURL(converted);
                    }
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getDOC = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return this.getDOCX(config);
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getJSON = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var data = [];
                    // first row needs to be headers
                    /** @type {?} */
                    var headers = [];
                    /** @type {?} */
                    var table = ( /** @type {?} */(document.getElementById(config.elementId)));
                    for (var index = 0; index < table.rows[0].cells.length; index++) {
                        headers[index] = table.rows[0].cells[index].innerHTML.toLowerCase().replace(/ /gi, '');
                    }
                    // go through cells
                    for (var i = 1; i < table.rows.length; i++) {
                        /** @type {?} */
                        var tableRow = table.rows[i];
                        /** @type {?} */
                        var rowData = {};
                        for (var j = 0; j < tableRow.cells.length; j++) {
                            rowData[headers[j]] = tableRow.cells[j].innerHTML;
                        }
                        data.push(rowData);
                    }
                    /** @type {?} */
                    var jsonString = JSON.stringify(data);
                    /** @type {?} */
                    var jsonBase64 = _this.btoa(jsonString);
                    /** @type {?} */
                    var dataStr = 'data:text/json;base64,' + jsonBase64;
                    if (config.download) {
                        _this.downloadFromDataURL(config.fileName, dataStr);
                        observer.next();
                    }
                    else {
                        observer.next(data);
                    }
                    observer.complete();
                });
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ExportAsService.prototype.getXML = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    /** @type {?} */
                    var xml = '<?xml version="1.0" encoding="UTF-8"?><Root><Classes>';
                    /** @type {?} */
                    var tritem = document.getElementById(config.elementId).getElementsByTagName('tr');
                    for (var i = 0; i < tritem.length; i++) {
                        /** @type {?} */
                        var celldata = tritem[i];
                        if (celldata.cells.length > 0) {
                            xml += '<Class name="' + celldata.cells[0].textContent + '">\n';
                            for (var m = 1; m < celldata.cells.length; ++m) {
                                xml += '\t<data>' + celldata.cells[m].textContent + '</data>\n';
                            }
                            xml += '</Class>\n';
                        }
                    }
                    xml += '</Classes></Root>';
                    /** @type {?} */
                    var base64 = 'data:text/xml;base64,' + _this.btoa(xml);
                    if (config.download) {
                        _this.downloadFromDataURL(config.fileName, base64);
                        observer.next();
                    }
                    else {
                        observer.next(base64);
                    }
                    observer.complete();
                });
            };
        /**
         * @private
         * @param {?} content
         * @return {?}
         */
        ExportAsService.prototype.btoa = /**
         * @private
         * @param {?} content
         * @return {?}
         */
            function (content) {
                return btoa(unescape(encodeURIComponent(content)));
            };
        ExportAsService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExportAsService.ctorParameters = function () { return []; };
        return ExportAsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExportAsModule = /** @class */ (function () {
        function ExportAsModule() {
        }
        ExportAsModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [ExportAsService],
                    },] }
        ];
        return ExportAsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ExportAsService = ExportAsService;
    exports.ExportAsModule = ExportAsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWV4cG9ydC1hcy51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC1leHBvcnQtYXMvbGliL2V4cG9ydC1hcy5zZXJ2aWNlLnRzIiwibmc6Ly9uZ3gtZXhwb3J0LWFzL2xpYi9leHBvcnQtYXMubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgRXhwb3J0QXNDb25maWcgfSBmcm9tICcuL2V4cG9ydC1hcy1jb25maWcubW9kZWwnO1xuXG5pbXBvcnQgaHRtbDJjYW52YXMgZnJvbSAnaHRtbDJjYW52YXMnO1xuaW1wb3J0ICogYXMgWExTWCBmcm9tICd4bHN4JztcbmltcG9ydCAqIGFzIGh0bWxEb2N4IGZyb20gJ2h0bWwtZG9jeC1qcy9kaXN0L2h0bWwtZG9jeCc7XG5pbXBvcnQgaHRtbDJwZGYgZnJvbSAnaHRtbDJwZGYuanMnO1xuXG53aW5kb3dbJ2h0bWwyY2FudmFzJ10gPSBodG1sMmNhbnZhcztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEV4cG9ydEFzU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvKipcbiAgICogTWFpbiBiYXNlNjQgZ2V0IG1ldGhvZCwgaXQgd2lsbCByZXR1cm4gdGhlIGZpbGUgYXMgYmFzZTY0IHN0cmluZ1xuICAgKiBAcGFyYW0gY29uZmlnIHlvdXIgY29uZmlnXG4gICAqL1xuICBnZXQoY29uZmlnOiBFeHBvcnRBc0NvbmZpZyk6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD4ge1xuICAgIC8vIHN0cnVjdHVyZSBtZXRob2QgbmFtZSBkeW5hbWljYWxseSBieSB0eXBlXG4gICAgY29uc3QgZnVuYyA9ICdnZXQnICsgY29uZmlnLnR5cGUudG9VcHBlckNhc2UoKTtcbiAgICAvLyBpZiB0eXBlIHN1cHBvcnRlZCBleGVjdXRlIGFuZCByZXR1cm5cbiAgICBpZiAodGhpc1tmdW5jXSkge1xuICAgICAgcmV0dXJuIHRoaXNbZnVuY10oY29uZmlnKTtcbiAgICB9XG5cbiAgICAvLyB0aHJvdyBlcnJvciBmb3IgdW5zdXBwb3J0ZWQgZm9ybWF0c1xuICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXIpID0+IHsgb2JzZXJ2ZXIuZXJyb3IoJ0V4cG9ydCB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQuJyk7IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgZXhwb3J0ZWQgZmlsZSBpbiBvbGQgamF2YXNjcmlwdCB3YXlcbiAgICogQHBhcmFtIGNvbmZpZyB5b3VyIGN1c3RvbSBjb25maWdcbiAgICogQHBhcmFtIGZpbGVOYW1lIE5hbWUgb2YgdGhlIGZpbGUgdG8gYmUgc2F2ZWQgYXNcbiAgICovXG4gIHNhdmUoY29uZmlnOiBFeHBvcnRBc0NvbmZpZywgZmlsZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIC8vIHNldCBkb3dubG9hZFxuICAgIGNvbmZpZy5kb3dubG9hZCA9IHRydWU7XG4gICAgLy8gZ2V0IGZpbGUgbmFtZSB3aXRoIHR5cGVcbiAgICBjb25maWcuZmlsZU5hbWUgPSBmaWxlTmFtZSArICcuJyArIGNvbmZpZy50eXBlO1xuICAgIHRoaXMuZ2V0KGNvbmZpZykuc3Vic2NyaWJlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgY29udGVudCBzdHJpbmcgdG8gYmxvYiBvYmplY3RcbiAgICogQHBhcmFtIGNvbnRlbnQgc3RyaW5nIHRvIGJlIGNvbnZlcnRlZFxuICAgKi9cbiAgY29udGVudFRvQmxvYihjb250ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJsb2I+IHtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyKSA9PiB7XG4gICAgICAvLyBnZXQgY29udGVudCBzdHJpbmcgYW5kIGV4dHJhY3QgbWltZSB0eXBlXG4gICAgICBjb25zdCBhcnIgPSBjb250ZW50LnNwbGl0KCcsJyksIG1pbWUgPSBhcnJbMF0ubWF0Y2goLzooLio/KTsvKVsxXSxcbiAgICAgICAgYnN0ciA9IGF0b2IoYXJyWzFdKTtcbiAgICAgIGxldCBuID0gYnN0ci5sZW5ndGg7XG4gICAgICBjb25zdCB1OGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgd2hpbGUgKG4tLSkge1xuICAgICAgICB1OGFycltuXSA9IGJzdHIuY2hhckNvZGVBdChuKTtcbiAgICAgIH1cbiAgICAgIG9ic2VydmVyLm5leHQobmV3IEJsb2IoW3U4YXJyXSwgeyB0eXBlOiBtaW1lIH0pKTtcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBiYXNlNjQgZmlsZSB0eXBlIGZyb20gYSBzdHJpbmcgbGlrZSBcImRhdGE6dGV4dC9jc3Y7YmFzZTY0LFwiXG4gICAqIEBwYXJhbSBmaWxlQ29udGVudCB0aGUgYmFzZTY0IHN0cmluZyB0byByZW1vdmUgdGhlIHR5cGUgZnJvbVxuICAgKi9cbiAgcmVtb3ZlRmlsZVR5cGVGcm9tQmFzZTY0KGZpbGVDb250ZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHJlID0gL15kYXRhOlteXSo7YmFzZTY0LC9nO1xuICAgIGNvbnN0IG5ld0NvbnRlbnQ6IHN0cmluZyA9IHJlW1N5bWJvbC5yZXBsYWNlXShmaWxlQ29udGVudCwgJycpO1xuICAgIHJldHVybiBuZXdDb250ZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0cnVjdHVyZSB0aGUgYmFzZTY0IGZpbGUgY29udGVudCB3aXRoIHRoZSBmaWxlIHR5cGUgc3RyaW5nXG4gICAqIEBwYXJhbSBmaWxlQ29udGVudCBmaWxlIGNvbnRlbnRcbiAgICogQHBhcmFtIGZpbGVNaW1lIGZpbGUgbWltZSB0eXBlIFwidGV4dC9jc3ZcIlxuICAgKi9cbiAgYWRkRmlsZVR5cGVUb0Jhc2U2NChmaWxlQ29udGVudDogc3RyaW5nLCBmaWxlTWltZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGRhdGE6JHtmaWxlTWltZX07YmFzZTY0LCR7ZmlsZUNvbnRlbnR9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBjcmVhdGUgZG93bmxvYWRhYmxlIGZpbGUgZnJvbSBkYXRhVVJMXG4gICAqIEBwYXJhbSBmaWxlTmFtZSBkb3dubG9hZGFibGUgZmlsZSBuYW1lXG4gICAqIEBwYXJhbSBkYXRhVVJMIGZpbGUgY29udGVudCBhcyBkYXRhVVJMXG4gICAqL1xuICBkb3dubG9hZEZyb21EYXRhVVJMKGZpbGVOYW1lOiBzdHJpbmcsIGRhdGFVUkw6IHN0cmluZyk6IHZvaWQge1xuICAgIC8vIGNyZWF0ZSBibG9iXG4gICAgdGhpcy5jb250ZW50VG9CbG9iKGRhdGFVUkwpLnN1YnNjcmliZShibG9iID0+IHtcbiAgICAgIC8vIGRvd25sb2FkIHRoZSBibG9iXG4gICAgICB0aGlzLmRvd25sb2FkRnJvbUJsb2IoYmxvYiwgZmlsZU5hbWUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERvd25sb2FkcyB0aGUgYmxvYiBvYmplY3QgYXMgYSBmaWxlXG4gICAqIEBwYXJhbSBibG9iIGZpbGUgb2JqZWN0IGFzIGJsb2JcbiAgICogQHBhcmFtIGZpbGVOYW1lIGRvd25sb2FkYWJsZSBmaWxlIG5hbWVcbiAgICovXG4gIGRvd25sb2FkRnJvbUJsb2IoYmxvYjogQmxvYiwgZmlsZU5hbWU6IHN0cmluZykge1xuICAgIC8vIGdldCBvYmplY3QgdXJsXG4gICAgY29uc3QgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgLy8gY2hlY2sgZm9yIG1pY3Jvc29mdCBpbnRlcm5ldCBleHBsb3JlclxuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYikge1xuICAgICAgLy8gdXNlIElFIGRvd25sb2FkIG9yIG9wZW4gaWYgdGhlIHVzZXIgdXNpbmcgSUVcbiAgICAgIHdpbmRvdy5uYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihibG9iLCBmaWxlTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIG5vdCB1c2luZyBJRSB0aGVuIGNyZWF0ZSBsaW5rIGVsZW1lbnRcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAvLyBzZXQgZG93bmxvYWQgYXR0ciB3aXRoIGZpbGUgbmFtZVxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZU5hbWUpO1xuICAgICAgLy8gc2V0IHRoZSBlbGVtZW50IGFzIGhpZGRlblxuICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgLy8gYXBwZW5kIHRoZSBib2R5XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgLy8gc2V0IGhyZWYgYXR0clxuICAgICAgZWxlbWVudC5ocmVmID0gdXJsO1xuICAgICAgLy8gY2xpY2sgb24gaXQgdG8gc3RhcnQgZG93bmxvYWRpbmdcbiAgICAgIGVsZW1lbnQuY2xpY2soKTtcbiAgICAgIC8vIHJlbW92ZSB0aGUgbGluayBmcm9tIHRoZSBkb21cbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRQREYoY29uZmlnOiBFeHBvcnRBc0NvbmZpZyk6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD4ge1xuICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXIpID0+IHtcbiAgICAgIGlmICghY29uZmlnLm9wdGlvbnMpIHtcbiAgICAgICAgY29uZmlnLm9wdGlvbnMgPSB7fTtcbiAgICAgIH1cbiAgICAgIGNvbmZpZy5vcHRpb25zLmZpbGVuYW1lID0gY29uZmlnLmZpbGVOYW1lO1xuICAgICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25maWcuZWxlbWVudElkKTtcbiAgICAgIGNvbnN0IHBkZiA9IGh0bWwycGRmKCkuc2V0KGNvbmZpZy5vcHRpb25zKS5mcm9tKGVsZW1lbnQsICdlbGVtZW50Jyk7XG4gICAgICBpZiAoY29uZmlnLmRvd25sb2FkKSB7XG4gICAgICAgIHBkZi5zYXZlKCk7XG4gICAgICAgIG9ic2VydmVyLm5leHQoKTtcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBkZi5vdXRwdXRQZGYoJ2RhdGF1cmlzdHJpbmcnKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgIG9ic2VydmVyLm5leHQoZGF0YSk7XG4gICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldFBORyhjb25maWc6IEV4cG9ydEFzQ29uZmlnKTogT2JzZXJ2YWJsZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcikgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25maWcuZWxlbWVudElkKTtcbiAgICAgIGh0bWwyY2FudmFzKGVsZW1lbnQsIGNvbmZpZy5vcHRpb25zKS50aGVuKChjYW52YXMpID0+IHtcbiAgICAgICAgY29uc3QgaW1nRGF0YSA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL1BORycpO1xuICAgICAgICBpZiAoY29uZmlnLnR5cGUgPT09ICdwbmcnICYmIGNvbmZpZy5kb3dubG9hZCkge1xuICAgICAgICAgIHRoaXMuZG93bmxvYWRGcm9tRGF0YVVSTChjb25maWcuZmlsZU5hbWUsIGltZ0RhdGEpO1xuICAgICAgICAgIG9ic2VydmVyLm5leHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYnNlcnZlci5uZXh0KGltZ0RhdGEpO1xuICAgICAgICB9XG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICB9LCBlcnIgPT4ge1xuICAgICAgICBvYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldENTVihjb25maWc6IEV4cG9ydEFzQ29uZmlnKTogT2JzZXJ2YWJsZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcikgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25maWcuZWxlbWVudElkKTtcbiAgICAgIGNvbnN0IGNzdiA9IFtdO1xuICAgICAgY29uc3Qgcm93czogYW55ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0YWJsZSB0cicpO1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJvd3MubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnN0IHJvd0VsZW1lbnQgPSByb3dzW2luZGV4XTtcbiAgICAgICAgY29uc3Qgcm93ID0gW107XG4gICAgICAgIGNvbnN0IGNvbHMgPSByb3dFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLCB0aCcpO1xuICAgICAgICBmb3IgKGxldCBjb2xJbmRleCA9IDA7IGNvbEluZGV4IDwgY29scy5sZW5ndGg7IGNvbEluZGV4KyspIHtcbiAgICAgICAgICBjb25zdCBjb2wgPSBjb2xzW2NvbEluZGV4XTtcbiAgICAgICAgICByb3cucHVzaChjb2wuaW5uZXJUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBjc3YucHVzaChyb3cuam9pbignLCcpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNzdkNvbnRlbnQgPSAnZGF0YTp0ZXh0L2NzdjtiYXNlNjQsJyArIHRoaXMuYnRvYShjc3Yuam9pbignXFxuJykpO1xuICAgICAgaWYgKGNvbmZpZy5kb3dubG9hZCkge1xuICAgICAgICB0aGlzLmRvd25sb2FkRnJvbURhdGFVUkwoY29uZmlnLmZpbGVOYW1lLCBjc3ZDb250ZW50KTtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChjc3ZDb250ZW50KTtcbiAgICAgIH1cbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldFRYVChjb25maWc6IEV4cG9ydEFzQ29uZmlnKTogT2JzZXJ2YWJsZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgY29uc3QgbmFtZUZyYWdzID0gY29uZmlnLmZpbGVOYW1lLnNwbGl0KCcuJyk7XG4gICAgY29uZmlnLmZpbGVOYW1lID0gYCR7bmFtZUZyYWdzWzBdfS50eHRgO1xuICAgIHJldHVybiB0aGlzLmdldENTVihjb25maWcpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRYTFMoY29uZmlnOiBFeHBvcnRBc0NvbmZpZyk6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD4ge1xuICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXIpID0+IHtcblxuICAgICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25maWcuZWxlbWVudElkKTtcbiAgICAgIGNvbnN0IHdzMyA9IFhMU1gudXRpbHMudGFibGVfdG9fc2hlZXQoZWxlbWVudCwgY29uZmlnLm9wdGlvbnMpO1xuICAgICAgY29uc3Qgd2IgPSBYTFNYLnV0aWxzLmJvb2tfbmV3KCk7XG4gICAgICBYTFNYLnV0aWxzLmJvb2tfYXBwZW5kX3NoZWV0KHdiLCB3czMsIGNvbmZpZy5maWxlTmFtZSk7XG4gICAgICBjb25zdCBvdXQgPSBYTFNYLndyaXRlKHdiLCB7IHR5cGU6ICdiYXNlNjQnIH0pO1xuICAgICAgY29uc3QgeGxzQ29udGVudCA9ICdkYXRhOmFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0O2Jhc2U2NCwnICsgb3V0O1xuICAgICAgaWYgKGNvbmZpZy5kb3dubG9hZCkge1xuICAgICAgICB0aGlzLmRvd25sb2FkRnJvbURhdGFVUkwoY29uZmlnLmZpbGVOYW1lLCB4bHNDb250ZW50KTtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCh4bHNDb250ZW50KTtcbiAgICAgIH1cbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldFhMU1goY29uZmlnOiBFeHBvcnRBc0NvbmZpZyk6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLmdldFhMUyhjb25maWcpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRET0NYKGNvbmZpZzogRXhwb3J0QXNDb25maWcpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyKSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50RG9jdW1lbnQ6IHN0cmluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbmZpZy5lbGVtZW50SWQpLm91dGVySFRNTDtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSAnPCFET0NUWVBFIGh0bWw+JyArIGNvbnRlbnREb2N1bWVudDtcbiAgICAgIGNvbnN0IGNvbnZlcnRlZCA9IGh0bWxEb2N4LmFzQmxvYihjb250ZW50LCBjb25maWcub3B0aW9ucyk7XG4gICAgICBpZiAoY29uZmlnLmRvd25sb2FkKSB7XG4gICAgICAgIHRoaXMuZG93bmxvYWRGcm9tQmxvYihjb252ZXJ0ZWQsIGNvbmZpZy5maWxlTmFtZSk7XG4gICAgICAgIG9ic2VydmVyLm5leHQoKTtcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgYmFzZTY0ZGF0YSA9IHJlYWRlci5yZXN1bHQ7XG4gICAgICAgICAgb2JzZXJ2ZXIubmV4dChiYXNlNjRkYXRhKTtcbiAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChjb252ZXJ0ZWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRET0MoY29uZmlnOiBFeHBvcnRBc0NvbmZpZyk6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLmdldERPQ1goY29uZmlnKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SlNPTihjb25maWc6IEV4cG9ydEFzQ29uZmlnKTogT2JzZXJ2YWJsZTxhbnlbXSB8IG51bGw+IHtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gW107IC8vIGZpcnN0IHJvdyBuZWVkcyB0byBiZSBoZWFkZXJzXG4gICAgICBjb25zdCBoZWFkZXJzID0gW107XG4gICAgICBjb25zdCB0YWJsZSA9IDxIVE1MVGFibGVFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbmZpZy5lbGVtZW50SWQpO1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRhYmxlLnJvd3NbMF0uY2VsbHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGhlYWRlcnNbaW5kZXhdID0gdGFibGUucm93c1swXS5jZWxsc1tpbmRleF0uaW5uZXJIVE1MLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvIC9naSwgJycpO1xuICAgICAgfVxuICAgICAgLy8gZ28gdGhyb3VnaCBjZWxsc1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0YWJsZS5yb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRhYmxlUm93ID0gdGFibGUucm93c1tpXTsgY29uc3Qgcm93RGF0YSA9IHt9O1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRhYmxlUm93LmNlbGxzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgcm93RGF0YVtoZWFkZXJzW2pdXSA9IHRhYmxlUm93LmNlbGxzW2pdLmlubmVySFRNTDtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLnB1c2gocm93RGF0YSk7XG4gICAgICB9XG4gICAgICBjb25zdCBqc29uU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgICBjb25zdCBqc29uQmFzZTY0ID0gdGhpcy5idG9hKGpzb25TdHJpbmcpO1xuICAgICAgY29uc3QgZGF0YVN0ciA9ICdkYXRhOnRleHQvanNvbjtiYXNlNjQsJyArIGpzb25CYXNlNjQ7XG4gICAgICBpZiAoY29uZmlnLmRvd25sb2FkKSB7XG4gICAgICAgIHRoaXMuZG93bmxvYWRGcm9tRGF0YVVSTChjb25maWcuZmlsZU5hbWUsIGRhdGFTdHIpO1xuICAgICAgICBvYnNlcnZlci5uZXh0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYnNlcnZlci5uZXh0KGRhdGEpO1xuICAgICAgfVxuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0WE1MKGNvbmZpZzogRXhwb3J0QXNDb25maWcpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyKSA9PiB7XG4gICAgICBsZXQgeG1sID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxSb290PjxDbGFzc2VzPic7XG4gICAgICBjb25zdCB0cml0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25maWcuZWxlbWVudElkKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndHInKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpdGVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNlbGxkYXRhID0gdHJpdGVtW2ldO1xuICAgICAgICBpZiAoY2VsbGRhdGEuY2VsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHhtbCArPSAnPENsYXNzIG5hbWU9XCInICsgY2VsbGRhdGEuY2VsbHNbMF0udGV4dENvbnRlbnQgKyAnXCI+XFxuJztcbiAgICAgICAgICBmb3IgKGxldCBtID0gMTsgbSA8IGNlbGxkYXRhLmNlbGxzLmxlbmd0aDsgKyttKSB7XG4gICAgICAgICAgICB4bWwgKz0gJ1xcdDxkYXRhPicgKyBjZWxsZGF0YS5jZWxsc1ttXS50ZXh0Q29udGVudCArICc8L2RhdGE+XFxuJztcbiAgICAgICAgICB9XG4gICAgICAgICAgeG1sICs9ICc8L0NsYXNzPlxcbic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHhtbCArPSAnPC9DbGFzc2VzPjwvUm9vdD4nO1xuICAgICAgY29uc3QgYmFzZTY0ID0gJ2RhdGE6dGV4dC94bWw7YmFzZTY0LCcgKyB0aGlzLmJ0b2EoeG1sKTtcbiAgICAgIGlmIChjb25maWcuZG93bmxvYWQpIHtcbiAgICAgICAgdGhpcy5kb3dubG9hZEZyb21EYXRhVVJMKGNvbmZpZy5maWxlTmFtZSwgYmFzZTY0KTtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChiYXNlNjQpO1xuICAgICAgfVxuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYnRvYShjb250ZW50OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29udGVudCkpKTtcbiAgfVxuXG59XG4iLCIvKipcbiAqIGFuZ3VsYXIgaW1wb3J0c1xuICovXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIG15IGltcG9ydHNcbiAqL1xuaW1wb3J0IHsgRXhwb3J0QXNTZXJ2aWNlIH0gZnJvbSAnLi9leHBvcnQtYXMuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW0V4cG9ydEFzU2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIEV4cG9ydEFzTW9kdWxlIHsgfVxuXG5cbiJdLCJuYW1lcyI6WyJPYnNlcnZhYmxlIiwiWExTWC51dGlscyIsIlhMU1gud3JpdGUiLCJodG1sRG9jeC5hc0Jsb2IiLCJJbmplY3RhYmxlIiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQVVBLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxXQUFXLENBQUM7QUFFcEM7UUFHRTtTQUFpQjs7Ozs7Ozs7OztRQU1qQiw2QkFBRzs7Ozs7WUFBSCxVQUFJLE1BQXNCOzs7b0JBRWxCLElBQUksR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7O2dCQUU5QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDZCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDM0I7O2dCQUdELE9BQU9BLGVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUFRLElBQU8sUUFBUSxDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzlGOzs7Ozs7Ozs7Ozs7UUFPRCw4QkFBSTs7Ozs7O1lBQUosVUFBSyxNQUFzQixFQUFFLFFBQWdCOztnQkFFM0MsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7O2dCQUV2QixNQUFNLENBQUMsUUFBUSxHQUFHLFFBQVEsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUM5Qjs7Ozs7Ozs7OztRQU1ELHVDQUFh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