{"version":3,"file":"ngx-export-as.js.map","sources":["ng://ngx-export-as/lib/export-as.service.ts","ng://ngx-export-as/lib/export-as.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { ExportAsConfig } from './export-as-config.model';\n\nimport html2canvas from 'html2canvas';\nimport * as XLSX from 'xlsx';\nimport * as htmlDocx from 'html-docx-js/dist/html-docx';\nimport html2pdf from 'html2pdf.js';\n\nwindow['html2canvas'] = html2canvas;\n\n@Injectable()\nexport class ExportAsService {\n\n  constructor() { }\n\n  /**\n   * Main base64 get method, it will return the file as base64 string\n   * @param config your config\n   */\n  get(config: ExportAsConfig): Observable<string | null> {\n    // structure method name dynamically by type\n    const func = 'get' + config.type.toUpperCase();\n    // if type supported execute and return\n    if (this[func]) {\n      return this[func](config);\n    }\n\n    // throw error for unsupported formats\n    return Observable.create((observer) => { observer.error('Export type is not supported.'); });\n  }\n\n  /**\n   * Save exported file in old javascript way\n   * @param config your custom config\n   * @param fileName Name of the file to be saved as\n   */\n  save(config: ExportAsConfig, fileName: string): void {\n    // set download\n    config.download = true;\n    // get file name with type\n    config.fileName = fileName + '.' + config.type;\n    this.get(config).subscribe();\n  }\n\n  /**\n   * Converts content string to blob object\n   * @param content string to be converted\n   */\n  contentToBlob(content: string): Observable<Blob> {\n    return Observable.create((observer) => {\n      // get content string and extract mime type\n      const arr = content.split(','), mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]);\n      let n = bstr.length;\n      const u8arr = new Uint8Array(n);\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n      observer.next(new Blob([u8arr], { type: mime }));\n      observer.complete();\n    });\n  }\n\n  /**\n   * Removes base64 file type from a string like \"data:text/csv;base64,\"\n   * @param fileContent the base64 string to remove the type from\n   */\n  removeFileTypeFromBase64(fileContent: string): string {\n    const re = /^data:[^]*;base64,/g;\n    const newContent: string = re[Symbol.replace](fileContent, '');\n    return newContent;\n  }\n\n  /**\n   * Structure the base64 file content with the file type string\n   * @param fileContent file content\n   * @param fileMime file mime type \"text/csv\"\n   */\n  addFileTypeToBase64(fileContent: string, fileMime: string): string {\n    return `data:${fileMime};base64,${fileContent}`;\n  }\n\n  /**\n   * create downloadable file from dataURL\n   * @param fileName downloadable file name\n   * @param dataURL file content as dataURL\n   */\n  downloadFromDataURL(fileName: string, dataURL: string): void {\n    // create blob\n    this.contentToBlob(dataURL).subscribe(blob => {\n      // download the blob\n      this.downloadFromBlob(blob, fileName);\n    });\n  }\n\n  /**\n   * Downloads the blob object as a file\n   * @param blob file object as blob\n   * @param fileName downloadable file name\n   */\n  downloadFromBlob(blob: Blob, fileName: string) {\n    // get object url\n    const url = window.URL.createObjectURL(blob);\n    // check for microsoft internet explorer\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      // use IE download or open if the user using IE\n      window.navigator.msSaveOrOpenBlob(blob, fileName);\n    } else {\n      // if not using IE then create link element\n      const element = document.createElement('a');\n      // set download attr with file name\n      element.setAttribute('download', fileName);\n      // set the element as hidden\n      element.style.display = 'none';\n      // append the body\n      document.body.appendChild(element);\n      // set href attr\n      element.href = url;\n      // click on it to start downloading\n      element.click();\n      // remove the link from the dom\n      document.body.removeChild(element);\n    }\n  }\n\n  private getPDF(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n      if (!config.options) {\n        config.options = {};\n      }\n      config.options.filename = config.fileName;\n      const element: HTMLElement = document.getElementById(config.elementId);\n      const pdf = html2pdf().set(config.options).from(element, 'element');\n      if (config.download) {\n        pdf.save();\n        observer.next();\n        observer.complete();\n      } else {\n        pdf.outputPdf('datauristring').then(data => {\n          observer.next(data);\n          observer.complete();\n        });\n      }\n    });\n  }\n\n  private getPNG(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n      const element: HTMLElement = document.getElementById(config.elementId);\n      html2canvas(element, config.options).then((canvas) => {\n        const imgData = canvas.toDataURL('image/PNG');\n        if (config.type === 'png' && config.download) {\n          this.downloadFromDataURL(config.fileName, imgData);\n          observer.next();\n        } else {\n          observer.next(imgData);\n        }\n        observer.complete();\n      }, err => {\n        observer.error(err);\n      });\n    });\n  }\n\n  private getCSV(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n      const element: HTMLElement = document.getElementById(config.elementId);\n      const csv = [];\n      const rows: any = element.querySelectorAll('table tr');\n      for (let index = 0; index < rows.length; index++) {\n        const rowElement = rows[index];\n        const row = [];\n        const cols = rowElement.querySelectorAll('td, th');\n        for (let colIndex = 0; colIndex < cols.length; colIndex++) {\n          const col = cols[colIndex];\n          row.push(col.innerText);\n        }\n        csv.push(row.join(','));\n      }\n      const csvContent = 'data:text/csv;base64,' + this.btoa(csv.join('\\n'));\n      if (config.download) {\n        this.downloadFromDataURL(config.fileName, csvContent);\n        observer.next();\n      } else {\n        observer.next(csvContent);\n      }\n      observer.complete();\n    });\n  }\n\n  private getTXT(config: ExportAsConfig): Observable<string | null> {\n    const nameFrags = config.fileName.split('.');\n    config.fileName = `${nameFrags[0]}.txt`;\n    return this.getCSV(config);\n  }\n\n  private getXLS(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n\n      const element: HTMLElement = document.getElementById(config.elementId);\n      const ws3 = XLSX.utils.table_to_sheet(element, config.options);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws3, config.fileName);\n      const out = XLSX.write(wb, { type: 'base64' });\n      const xlsContent = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + out;\n      if (config.download) {\n        this.downloadFromDataURL(config.fileName, xlsContent);\n        observer.next();\n      } else {\n        observer.next(xlsContent);\n      }\n      observer.complete();\n    });\n  }\n\n  private getXLSX(config: ExportAsConfig): Observable<string | null> {\n    return this.getXLS(config);\n  }\n\n  private getDOCX(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n      const contentDocument: string = document.getElementById(config.elementId).outerHTML;\n      const content = '<!DOCTYPE html>' + contentDocument;\n      const converted = htmlDocx.asBlob(content, config.options);\n      if (config.download) {\n        this.downloadFromBlob(converted, config.fileName);\n        observer.next();\n        observer.complete();\n      } else {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          const base64data = reader.result;\n          observer.next(base64data);\n          observer.complete();\n        };\n        reader.readAsDataURL(converted);\n      }\n    });\n  }\n\n  private getDOC(config: ExportAsConfig): Observable<string | null> {\n    return this.getDOCX(config);\n  }\n\n  private getJSON(config: ExportAsConfig): Observable<any[] | null> {\n    return Observable.create((observer) => {\n      const data = []; // first row needs to be headers\n      const headers = [];\n      const table = <HTMLTableElement>document.getElementById(config.elementId);\n      for (let index = 0; index < table.rows[0].cells.length; index++) {\n        headers[index] = table.rows[0].cells[index].innerHTML.toLowerCase().replace(/ /gi, '');\n      }\n      // go through cells\n      for (let i = 1; i < table.rows.length; i++) {\n        const tableRow = table.rows[i]; const rowData = {};\n        for (let j = 0; j < tableRow.cells.length; j++) {\n          rowData[headers[j]] = tableRow.cells[j].innerHTML;\n        }\n        data.push(rowData);\n      }\n      const jsonString = JSON.stringify(data);\n      const jsonBase64 = this.btoa(jsonString);\n      const dataStr = 'data:text/json;base64,' + jsonBase64;\n      if (config.download) {\n        this.downloadFromDataURL(config.fileName, dataStr);\n        observer.next();\n      } else {\n        observer.next(data);\n      }\n      observer.complete();\n    });\n  }\n\n  private getXML(config: ExportAsConfig): Observable<string | null> {\n    return Observable.create((observer) => {\n      let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><Root><Classes>';\n      const tritem = document.getElementById(config.elementId).getElementsByTagName('tr');\n      for (let i = 0; i < tritem.length; i++) {\n        const celldata = tritem[i];\n        if (celldata.cells.length > 0) {\n          xml += '<Class name=\"' + celldata.cells[0].textContent + '\">\\n';\n          for (let m = 1; m < celldata.cells.length; ++m) {\n            xml += '\\t<data>' + celldata.cells[m].textContent + '</data>\\n';\n          }\n          xml += '</Class>\\n';\n        }\n      }\n      xml += '</Classes></Root>';\n      const base64 = 'data:text/xml;base64,' + this.btoa(xml);\n      if (config.download) {\n        this.downloadFromDataURL(config.fileName, base64);\n        observer.next();\n      } else {\n        observer.next(base64);\n      }\n      observer.complete();\n    });\n  }\n\n  private btoa(content: string) {\n    return btoa(unescape(encodeURIComponent(content)));\n  }\n\n}\n","/**\n * angular imports\n */\nimport { NgModule } from '@angular/core';\n\n/**\n * my imports\n */\nimport { ExportAsService } from './export-as.service';\n\n@NgModule({\n  providers: [ExportAsService],\n})\nexport class ExportAsModule { }\n\n\n"],"names":["XLSX.utils","XLSX.write","htmlDocx.asBlob"],"mappings":"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"}
